import string
import numpy as np
import cv2
import math


# In[2]:


def get_vocabulary(voc_type, EOS='EOS', PADDING='PAD', UNKNOWN='UNK'):

	voc = None
	types = ['Arabic', 'Bangla', 'English', 'French', 'German', 'Hindi', 'Italian', 'Symbols']
	if voc_type == 'Arabic':
		voc = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '،', 'ء', 'آ', 'أ', 'ؤ', 'إ', 'ئ', 'ا', 'ب', 'ة', 'ت', 'ث', 'ج', 'ح', 'خ', 'د', 'ذ', 'ر', 'ز', 'س', 'ش', 'ص', 'ض', 'ط', 'ظ', 'ع', 'غ', 'ـ', 'ف', 'ق', 'ك', 'ل', 'م', 'ن', 'ه', 'و', 'ى', 'ي', 'ً', 'ٌ', 'َ', 'ُ', 'ِ', 'ّ', 'ْ', '٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩', '٫', '٬', 'پ', 'ڤ', 'ڥ', 'ڨ', 'ڭ', '\u200e']
	elif voc_type == 'Bangla':
		voc = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'C', 'I', 'L', 'M', 'P', 'R', 'Y', '।', 'ঁ', 'ং', 'ঃ', 'অ', 'আ', 'ই', 'ঈ', 'উ', 'ঋ', 'এ', 'ঐ', 'ও', 'ঔ', 'ক', 'খ', 'গ', 'ঘ', 'ঙ', 'চ', 'ছ', 'জ', 'ঝ', 'ঞ', 'ট', 'ঠ', 'ড', 'ঢ', 'ণ', 'ত', 'থ', 'দ', 'ধ', 'ন', 'প', 'ফ', 'ব', 'ভ', 'ম', 'য', 'র', 'ল', 'শ', 'ষ', 'স', 'হ', '়', 'া', 'ি', 'ী', 'ু', 'ূ', 'ৃ', 'ৄ', 'ে', 'ৈ', 'ো', 'ৌ', '্', 'ৎ', 'ড়', 'য়', '০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯', '৷', '\u200c']
	elif voc_type == 'English':
		voc = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '£', '¥', '°', '·', 'É', '×', 'Ø', 'à', 'é', 'ō', 'α', 'ـ', 'ক', 'গ', 'ঙ', 'ত', 'ন', 'ব', 'ম', 'র', 'ল', 'া', 'ু', '্', '–', '—', '‘', '“', '”', '₩', '€', '▪', '●']
	elif voc_type == 'French':
		voc = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '°', '²', 'À', 'Á', 'Â', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Î', 'Ô', 'Ü', 'à', 'á', 'â', 'ç', 'è', 'é', 'ê', 'î', 'ô', 'û', 'Œ', 'œ', 'ε', '€', '™']
	elif voc_type == 'German':
		voc = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '°', '·', 'Ä', 'É', 'Ö', 'Ü', 'ß', 'à', 'ä', 'é', 'ó', 'ö', 'ü', 'ō', 'Š', 'Ÿ', 'ʒ', 'β', 'δ', 'з', 'Ṡ', '‘', '€']
	elif voc_type == 'Hindi':
		voc = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'F', 'G', 'N', 'O', 'R', 'a', 'e', 'i', 'l', 'm', 'n', 'r', 's', 't', 'u', 'y', 'ँ', 'ं', 'ः', 'अ', 'आ', 'इ', 'ई', 'उ', 'ऊ', 'ऋ', 'ए', 'ऐ', 'ऑ', 'ओ', 'औ', 'क', 'ख', 'ग', 'घ', 'च', 'छ', 'ज', 'झ', 'ञ', 'ट', 'ठ', 'ड', 'ढ', 'ण', 'त', 'थ', 'द', 'ध', 'न', 'प', 'फ', 'ब', 'भ', 'म', 'य', 'र', 'ल', 'ळ', 'व', 'श', 'ष', 'स', 'ह', 'ा', 'ि', 'ी', 'ु', 'ू', 'ृ', 'ॅ', 'े', 'ै', 'ॉ', 'ो', 'ौ', '्', 'ॐ', 'ड़', 'ढ़', '०', '१', '२', '३', '४', '५', '६', '७', '८', '९', '\u200c', '\u200d']
	elif voc_type == 'Italian':
		voc = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '°', '·', 'À', 'Ã', 'È', 'É', 'Ê', 'Ì', 'Ñ', 'Ò', 'Ù', 'Ü', 'à', 'á', 'ä', 'è', 'é', 'ê', 'ì', 'ò', 'ó', 'ö', 'ù', 'ú', 'ü', 'Ā', 'ō', 'ˉ', 'β', 'Ш', 'л', 'ф', 'ч', '‘', '’', '“', '€', '《', '》']
	elif voc_type == 'Symbols':
		voc = ['!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '¥', '§', '®', '·', '×', '،', '٬', '।', 'ঃ', '\u200c', '—', '•', '※', '₩', '€', '∣', '▁', '▪', '♬', '。', '・'] 
	elif voc_type == 'LOWERCASE':
		voc = list(string.digits + string.ascii_lowercase)
	elif voc_type == 'ALLCASES':
		voc = list(string.digits + string.ascii_letters)
	elif voc_type == 'ALLCASES_SYMBOLS':
		voc = list(string.printable[:-6])
	else:
		raise KeyError('voc_type must be one of "Arabic", "Bangla", "Latin", "French", "German", "Hindi", "Italian", "Symbols", "ALLCASES", "LOWERCASE" or "ALLCASES_SYMBOLS"')

	# update the voc with specifical chars
	voc.append(EOS)
	voc.append(PADDING)
	voc.append(UNKNOWN)

	char2id = dict(zip(voc, range(len(voc))))
	id2char = dict(zip(range(len(voc)), voc))

	return voc, char2id, id2char


def rotate_img(img, angle, scale=1):
	H, W, _ = img.shape
	rangle = np.deg2rad(angle)  # angle in radians
	new_width = (abs(np.sin(rangle) * H) + abs(np.cos(rangle) * W)) * scale
	new_height = (abs(np.cos(rangle) * H) + abs(np.sin(rangle) * W)) * scale

	rot_mat = cv2.getRotationMatrix2D((new_width * 0.5, new_height * 0.5), angle, scale)
	rot_move = np.dot(rot_mat, np.array([(new_width - W) * 0.5, (new_height - H) * 0.5, 0]))
	rot_mat[0, 2] += rot_move[0]
	rot_mat[1, 2] += rot_move[1]

	rot_img = cv2.warpAffine(img, rot_mat, (int(math.ceil(new_width)), int(math.ceil(new_height))),
							 flags=cv2.INTER_LANCZOS4)

	return rot_img
